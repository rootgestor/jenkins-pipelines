pipeline {
  agent any
  environment {
    REACT_APP_API_BACK = credentials('ROOTGESTOR_DEMO_API_URL')
    API_KEY = credentials('ROOTGESTOR_DEMO_API_KEY')
    UPLOADS_CDN_PATH = credentials('UPLOADS_DEMO_CDN_PATH')
  }
  stages {
    stage('Install frontend dependencies') {
      steps {
        sh 'rm -rf frontend'
        sh 'git clone git@github.com:rootgestor/frontend.git'
        sh 'cd frontend && git clone --recurse-submodules git@github.com:rootgestor/isolib.git common/isolib'
        yarn(command: 'install', workspaceSubdirectory: 'frontend')
      }
    }

    stage('build frontend') {
      steps {
        yarn(command: 'build', workspaceSubdirectory: 'frontend')
      }
    }

    stage('Publish Saas') {
      parallel {
        stage('Publish frontend') {
          steps {
            withCredentials([
              sshUserPrivateKey(credentialsId: 'AWS_KEY_PEM', keyFileVariable: 'AWS_KEY_PEM'),
              string(credentialsId: 'AWS_INSTANCE_DEMO_URL', variable: 'AWS_INSTANCE_DEMO_URL')
            ]) {
              sh '''
              scp -i $AWS_KEY_PEM frontend/dist/* $AWS_INSTANCE_DEMO_URL:/var/www/html/saas/
              '''
            }
          }
        }

        stage('Publish backend') {
          steps {
            withCredentials([
              sshUserPrivateKey(credentialsId: 'AWS_KEY_PEM', keyFileVariable: 'AWS_KEY_PEM'),
              string(credentialsId: 'AWS_INSTANCE_DEMO_URL', variable: 'AWS_INSTANCE_DEMO_URL')
            ]) {
              sh '''
              ssh -i $AWS_KEY_PEM $AWS_INSTANCE_DEMO_URL 'source ~/.nvm/nvm.sh && cd ~/opt/apps/backend/common && git pull origin master && cd .. && git pull origin master && yarn && yarn restart:pm2'
              '''
            }
          }
        }
      }
    }

    stage('Clean') {
      steps {
        sh 'rm -rf saas'
      }
    }
  }
}
